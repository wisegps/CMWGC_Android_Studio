package com.wgc.cmwgc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DATA_ENTITY".
*/
public class DeviceDataEntityDao extends AbstractDao<DeviceDataEntity, Long> {

    public static final String TABLENAME = "DEVICE_DATA_ENTITY";

    /**
     * Properties of entity DeviceDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(2, double.class, "lon", false, "LON");
        public final static Property GpsFlag = new Property(3, int.class, "gpsFlag", false, "GPSFLAG");
        public final static Property Speed = new Property(4, int.class, "speed", false, "SPEED");
        public final static Property Direct = new Property(5, float.class, "direct", false, "DIRECT");
        public final static Property Signal = new Property(6, int.class, "signal", false, "SIGNAL");
        public final static Property CreatedAt = new Property(7, String.class, "createdAt", false, "CREATEAT");
        public final static Property GpsTime = new Property(8, String.class, "gpsTime", false, "GPSTIME");
        public final static Property RcvTime = new Property(9, String.class, "rcvTime", false, "RCVTIME");
        public final static Property Mileage = new Property(10, double.class, "mileage", false, "MILEAGE");
        public final static Property Fuel = new Property(11, double.class, "fuel", false, "FUEL");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
    }


    public DeviceDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DATA_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LON\" REAL NOT NULL ," + // 2: lon
                "\"GPSFLAG\" INTEGER NOT NULL ," + // 3: gpsFlag
                "\"SPEED\" INTEGER NOT NULL ," + // 4: speed
                "\"DIRECT\" REAL NOT NULL ," + // 5: direct
                "\"SIGNAL\" INTEGER NOT NULL ," + // 6: signal
                "\"CREATEAT\" TEXT," + // 7: createdAt
                "\"GPSTIME\" TEXT," + // 8: gpsTime
                "\"RCVTIME\" TEXT," + // 9: rcvTime
                "\"MILEAGE\" REAL NOT NULL ," + // 10: mileage
                "\"FUEL\" REAL NOT NULL ," + // 11: fuel
                "\"STATUS\" TEXT);"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DATA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLon());
        stmt.bindLong(4, entity.getGpsFlag());
        stmt.bindLong(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getDirect());
        stmt.bindLong(7, entity.getSignal());
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(8, createdAt);
        }
 
        String gpsTime = entity.getGpsTime();
        if (gpsTime != null) {
            stmt.bindString(9, gpsTime);
        }
 
        String rcvTime = entity.getRcvTime();
        if (rcvTime != null) {
            stmt.bindString(10, rcvTime);
        }
        stmt.bindDouble(11, entity.getMileage());
        stmt.bindDouble(12, entity.getFuel());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLon());
        stmt.bindLong(4, entity.getGpsFlag());
        stmt.bindLong(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getDirect());
        stmt.bindLong(7, entity.getSignal());
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(8, createdAt);
        }
 
        String gpsTime = entity.getGpsTime();
        if (gpsTime != null) {
            stmt.bindString(9, gpsTime);
        }
 
        String rcvTime = entity.getRcvTime();
        if (rcvTime != null) {
            stmt.bindString(10, rcvTime);
        }
        stmt.bindDouble(11, entity.getMileage());
        stmt.bindDouble(12, entity.getFuel());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceDataEntity readEntity(Cursor cursor, int offset) {
        DeviceDataEntity entity = new DeviceDataEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lon
            cursor.getInt(offset + 3), // gpsFlag
            cursor.getInt(offset + 4), // speed
            cursor.getFloat(offset + 5), // direct
            cursor.getInt(offset + 6), // signal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdAt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gpsTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rcvTime
            cursor.getDouble(offset + 10), // mileage
            cursor.getDouble(offset + 11), // fuel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceDataEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLon(cursor.getDouble(offset + 2));
        entity.setGpsFlag(cursor.getInt(offset + 3));
        entity.setSpeed(cursor.getInt(offset + 4));
        entity.setDirect(cursor.getFloat(offset + 5));
        entity.setSignal(cursor.getInt(offset + 6));
        entity.setCreatedAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGpsTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRcvTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMileage(cursor.getDouble(offset + 10));
        entity.setFuel(cursor.getDouble(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceDataEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceDataEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceDataEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
